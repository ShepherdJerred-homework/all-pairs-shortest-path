<html>
  <head>
    <meta charset="utf-8"/>
    <title>Comp 425 Project</title>
    <link rel="stylesheet" href="../standard.css" type="text/css"/>
    <script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    <script type="text/javascript" src="/gfoust/sh/scripts/shCore.js"></script>
    <script type="text/javascript" src="/gfoust/sh/scripts/shBrushCpp.js"></script>
    <script type="text/javascript">
      SyntaxHighlighter.defaults.gutter = false;
      SyntaxHighlighter.all();
    </script>
    <link type="text/css" rel="stylesheet" href="/gfoust/sh/styles/shCore.css"/>
    <link type="text/css" rel="stylesheet"
          href="/gfoust/sh/styles/shThemeFoust.css"/>
    <base target="_top"/>
    <style>
      blockquote {
          margin: 0 0 0 3ex;
      }
      .alg td {
          padding: 0;
      }
      .alg table {
          margin-bottom: 1em;
      }
      .alg div {
          margin-left: 2pt;
      }
    </style>
  </head>
  <body>
    <h3>Overview</h3>
    <p>
      For this project, you will write a program which answers queries about
      the quickest route between locations.
    </p>
    <p>
      You will start by reading in a &ldquo;map&rdquo; which lists locations
      and the roads between them.  For simplicity, locations will just be
      numbered from \(0\) to \(n - 1\), where \(n\) is the number of
      locations, and roads will just be given as the distance between two
      locations.  Note that roads may not always be bi-directional; some may
      be one-way roads.  Thus, in some cases it may be quicker to get from
      \(i\) to \(j\) than it is to get from \(j\) to \(i\).
    </p>
    <p>
      Next you will be given a series of routes.  A route is sequence of
      locations that must be visited in order.  For each route, you will
      output the shortest path that will visit the specified locations in the
      specified order.  When you are done, you will output the route with the
      shortest distance.
    </p>
    <p>
      You should parallelize your program as much as possible using OpenMP.
    </p>
    <h3>All-pairs shortest path</h3>
    <p>
      In order to perform this task, you will need to be able to calculate the
      shortest path between any pair of locations.  This is a famous graph
      algorithm: given a graph \(\langle V, E \rangle\), where \(V\) is the
      set of vertices and \(E\) is the set of edges, calculate the shortest
      path between all pairs of vertices.  This has potential to be an
      expensive operation for a large number of vertices.  However,
      the <dfn>Floyd-Warshall Algorithm</dfn> can calculate this for all pairs
      of locations in \(\Theta(n^3)\) time, where \(n = |V|\).
    </p>
    <p>
      The Floyd-Warshall algorithm begins with an <dfn>adjancency
      matrix</dfn>; that is, a matrix such that \(A_{i, j} = d\), where \(d\)
      is the distance of the road from \(i\) to \(j\), or <i>infinity</i> if
      no such road exists.  Then it repeatedly calculates a matrix \(P^k\)
      such that \(P^k_{i, j}\) is the shortest path from \(i\) to \(j\) that
      does not go <em>through</em> any locations greater than or equal to
      \(k\).  (We define going &ldquo;through&rdquo; a location as entering
      and exiting the location; i.e., it is a midpoint, not an endpoint.)
      Note that \(P^0 = A\), since the adjancency matrix defines the shortest
      path without going through any locations, and \(P^n\) (where \(n =
      |V|\)) would give the shortest paths between all pairs, since it could
      go through any location.
    </p>
    <p>
      The key insight is that you can easily calculate \(P^k\) using \(P^{k -
      1}\).  Since \(P^{k - 1}\) has already considered all the paths that go
      through locations \(0\) through \(k - 1\), the only additional paths you need to
      consider are those which go through \(k\).  Since it doesn't make sense
      to go through location \(k\) multiple times, the shortest path through
      \(k\) would be \(P^{k - 1}_{i, k} + P^{k - 1}_{k, j}\).  The full
      algorithm is as follows:
    </p>
    <div class="alg example" style="font-family: serif">
      <table>
        <tr>
          <td>Input:</td>
          <td><b>n</b> &mdash; number of vertices</td>
        </tr>
        <tr>
          <td></td>
          <td><b>a</b> &mdash; adjacency matrix (n &times; n)</td>
        </tr>
        <tr>
          <td>Output:</td>
          <td>transforms <b>a</b> so that it contains shortest path for all pairs</td>
        </tr>
      </table>
      <div>
        for k &larr; 0 to n - 1
        <blockquote>
          for i &larr; 0 to n - 1
          <blockquote>
            for j &larr; 0 to n - 1
            <blockquote>
              a[i, j] &larr; min(a[i, j], a[i, k] + a[k, j])
            </blockquote>
            endfor
            </blockquote>
          endfor
          </blockquote>
        endfor
      </div>
    </div>
    <h3>Requirements</h3>
    <p>
      The input for your program will be as follows:
    </p>
    <ul>
      <li>The number of locations</li>
      <li>The number of roads</li>
      <li>For each road:
        <ul>
          <li>The starting location</li>
          <li>The ending location</li>
          <li>The numberOfVertices of the road (all distances should be type <code>double</code>)</li>
        </ul>
      </li>
      <li>The number of routes</li>
      <li>For each route:
        <ul>
          <li>The number of locations in the route</li>
          <li>The locations in the route in the order they must be visited</li>
        </ul>
      </li>
    </ul>
    <p>
      As an example, consider the following map with 5 locations.
    </p>
    <div>
      <img src="img/graph.png"/>
    </div>
    <p>
      Note that, in order to simplify things, bi-directional roads will be
      represented as two uni-directional roads.  Thus, this map has 13 roads,
      and would be represented in input as follows:
    </p>
    <pre>
5
13
0 1 5
0 2 2
1 0 5
1 3 4
1 4 6
2 0 2
2 3 3
3 0 4
3 1 4
3 2 3
3 4 4
4 0 8
4 3 7
</pre>
    <p>
      The output of your program will be as follows:
    </p>
    <ul>
      <li>For each route (in the input order)
        <ul>
          <li>The shortest numberOfVertices of the route (on its own line)</li>
        </ul>
      </li>
      <li>
        The route with the shortest numberOfVertices (all locations in order on one line
        separated by spaces)
      </li>
    </ul>
    <p>
      If there is a tie (i.e., two routes have the same distance), then give
      the route that came first in the input.
    </p>
    <h3>Parallelization</h3>
    <p>
      You are to parallelize your program as much as possible while still
      ensuring correct semantics.  You should also minimize the number of
      times you fork threads by extending your critical regions.  I will give
      bonus points to the five fastest (correct) programs.
    </p>
    <p>
      Be very careful of race conditions.  Race conditions can be hard to
      detect because they don't always cause bad behavior:  you can run your
      program 99 times and it will work perfectly, but on the 100th time it
      will crash.  Watch out for all access to shared varaibles; guard them
      with critical regions if necessary.
    </p>
  </body>
</html>
